from django.test import TestCase

from .queries import *

class SQLQueryMethodTests(TestCase):

	def test_insert_query_full_keys(self):
		"""
		insert_query should generate the correct INSERT INTO query when given the full set of 
		keys for a table
		"""
		full_student_values = { 'netId' : 'test_full', 
							'name' : 'test', 
							'bio' : 'test', 
							'major' : 'test', 
							'yearInSchool' : 'test' }

		expected_query = "insert into Student(bio, major, name, netId, yearInSchool) " \
						 "values (\'test\', \'test\', \'test\', \'test_full\', \'test\')"
		
		actual_query = insert_query("Student", full_student_values)
		self.assertEqual(expected_query, actual_query)

	def test_insert_query_partial_keys(self):
		"""
		insert_query should generate the correct INSERT INTO query when given a partial set
		of keys for a table
		"""
		partial_student_values = {'netId': 'test_part', 
							  	  'name' : 'test_part'}
		expected_query = "insert into Student(name, netId) " \
						 "values (\'test_part\', \'test_part\')"
		actual_query = insert_query("Student",partial_student_values)
		self.assertEqual(expected_query, actual_query)

	def test_insert_query_faulty_keys(self):
		"""
		when attempting to insert an object that has keys that are not in a particular table,
		insert_query should return None
		"""
		faulty_student_values = {'netId': 'test_part', 
							     'false_key' : 'test_part'}
		actual_query = insert_query("Student", faulty_student_values)
		self.assertEqual(None, actual_query)

	def test_update_query(self):
		"""
		test that queries generated by update_query work as expected
		"""
		conditions = "netid=\'test\'"
		fields = {'name': 'test'}
		expected_query = "update Student set name=\'test\' where netid=\'test\'"
		actual_query = update_query("Student", fields, conditions)
		self.assertEqual(expected_query, actual_query)

	def test_delete_query(self):
		"""
		test that queries generated by delete_query work as expected
		"""
		conditions = "netid=\'test\'"
		expected_query = "delete from Student where netid=\'test\'"
		actual_query = delete_query("Student", conditions)
		self.assertEqual(expected_query, actual_query)

	def test_select_query_no_columns_no_conditions(self):
		"""
		test that queries generated by select_query work as expected
		"""
		tables = ["Student"]
		expected_query = "select * from Student"
		actual_query = select_query(tables, [], '')
		self.assertEqual(expected_query, actual_query)

	def test_select_query_no_columns(self):
		"""
		test that queries generated by select_query work as expected
		"""
		tables = ["Student"]
		conditions = "netid=\'test\' and name=\'test\'"
		expected_query = "select * from Student where netid=\'test\' and name=\'test\'"
		actual_query = select_query(tables, [], conditions)
		self.assertEqual(expected_query, actual_query)

	def test_select_query_no_conditions(self):
		"""
		test that queries generated by select_query work as expected
		"""
		tables = ["Student"]
		columns = ['name', 'yearInSchool']
		expected_query = "select name, yearInSchool from Student"
		actual_query = select_query(tables, columns, '')
		self.assertEqual(expected_query, actual_query)
	def test_select_query(self):
		"""
		test that queries generated by select_query work as expected
		"""
		tables = ["Student"]
		columns = ['name', 'yearInSchool']
		conditions = "netid=\'test\' and name=\'test\'"
		expected_query = "select name, yearInSchool from Student where netid=\'test\' and name=\'test\'"
		actual_query = select_query(tables, columns, conditions)
		self.assertEqual(expected_query, actual_query)